[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlmodel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlmodel",
        "description": "sqlmodel",
        "detail": "sqlmodel",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "async_engine_from_config",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "MailConfig",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "importPath": "app.core.db",
        "description": "app.core.db",
        "isExtraImport": true,
        "detail": "app.core.db",
        "documentation": {}
    },
    {
        "label": "UserSignUpRequest",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserVerifyRequest",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserLoginRequest",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserPasswordResetRequest",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "RequestUserPasswordResetRequest",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "verify_site_ownership",
        "importPath": "app.middleware.site_middleware",
        "description": "app.middleware.site_middleware",
        "isExtraImport": true,
        "detail": "app.middleware.site_middleware",
        "documentation": {}
    },
    {
        "label": "verify_site_ownership",
        "importPath": "app.middleware.site_middleware",
        "description": "app.middleware.site_middleware",
        "isExtraImport": true,
        "detail": "app.middleware.site_middleware",
        "documentation": {}
    },
    {
        "label": "ValidDomainSchema",
        "importPath": "app.schemas.site",
        "description": "app.schemas.site",
        "isExtraImport": true,
        "detail": "app.schemas.site",
        "documentation": {}
    },
    {
        "label": "ValidDomainSchema",
        "importPath": "app.schemas.site",
        "description": "app.schemas.site",
        "isExtraImport": true,
        "detail": "app.schemas.site",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.middleware.auth_middleware",
        "description": "app.middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "app.middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.middleware.auth_middleware",
        "description": "app.middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "app.middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "domain_registry_crud",
        "importPath": "app.crud.site",
        "description": "app.crud.site",
        "isExtraImport": true,
        "detail": "app.crud.site",
        "documentation": {}
    },
    {
        "label": "domain_verification_crud",
        "importPath": "app.crud.site",
        "description": "app.crud.site",
        "isExtraImport": true,
        "detail": "app.crud.site",
        "documentation": {}
    },
    {
        "label": "get_domain_status_crud",
        "importPath": "app.crud.site",
        "description": "app.crud.site",
        "isExtraImport": true,
        "detail": "app.crud.site",
        "documentation": {}
    },
    {
        "label": "get_list_user_domains_crud",
        "importPath": "app.crud.site",
        "description": "app.crud.site",
        "isExtraImport": true,
        "detail": "app.crud.site",
        "documentation": {}
    },
    {
        "label": "remove_domain_crud",
        "importPath": "app.crud.site",
        "description": "app.crud.site",
        "isExtraImport": true,
        "detail": "app.crud.site",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "FastMail",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "MessageSchema",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "ConnectionConfig",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "app.utils.logger",
        "description": "app.utils.logger",
        "isExtraImport": true,
        "detail": "app.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "app.utils.logger",
        "description": "app.utils.logger",
        "isExtraImport": true,
        "detail": "app.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "app.utils.logger",
        "description": "app.utils.logger",
        "isExtraImport": true,
        "detail": "app.utils.logger",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Site",
        "importPath": "app.models.site",
        "description": "app.models.site",
        "isExtraImport": true,
        "detail": "app.models.site",
        "documentation": {}
    },
    {
        "label": "Site",
        "importPath": "app.models.site",
        "description": "app.models.site",
        "isExtraImport": true,
        "detail": "app.models.site",
        "documentation": {}
    },
    {
        "label": "Site",
        "importPath": "app.models.site",
        "description": "app.models.site",
        "isExtraImport": true,
        "detail": "app.models.site",
        "documentation": {}
    },
    {
        "label": "generate_domain_verification_token",
        "importPath": "app.utils.generate_tokens",
        "description": "app.utils.generate_tokens",
        "isExtraImport": true,
        "detail": "app.utils.generate_tokens",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "verify_domain_task",
        "importPath": "app.tasks.domain_verification",
        "description": "app.tasks.domain_verification",
        "isExtraImport": true,
        "detail": "app.tasks.domain_verification",
        "documentation": {}
    },
    {
        "label": "random,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random.",
        "description": "random.",
        "detail": "random.",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "app.core.email",
        "description": "app.core.email",
        "isExtraImport": true,
        "detail": "app.core.email",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "dns.resolver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dns.resolver",
        "description": "dns.resolver",
        "detail": "dns.resolver",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "app.api.v1",
        "description": "app.api.v1",
        "isExtraImport": true,
        "detail": "app.api.v1",
        "documentation": {}
    },
    {
        "label": "site_router",
        "importPath": "app.api.v1",
        "description": "app.api.v1",
        "isExtraImport": true,
        "detail": "app.api.v1",
        "documentation": {}
    },
    {
        "label": "scan_router",
        "importPath": "app.api.v1",
        "description": "app.api.v1",
        "isExtraImport": true,
        "detail": "app.api.v1",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.0ce8051e6c15_remove_the_unique_constraint_from_the_",
        "description": "backend.alembic.versions.0ce8051e6c15_remove_the_unique_constraint_from_the_",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_sites_domain'), table_name='sites')\n    op.create_index(op.f('ix_sites_domain'), 'sites', ['domain'], unique=False)\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_sites_domain'), table_name='sites')",
        "detail": "backend.alembic.versions.0ce8051e6c15_remove_the_unique_constraint_from_the_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.0ce8051e6c15_remove_the_unique_constraint_from_the_",
        "description": "backend.alembic.versions.0ce8051e6c15_remove_the_unique_constraint_from_the_",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_sites_domain'), table_name='sites')\n    op.create_index(op.f('ix_sites_domain'), 'sites', ['domain'], unique=True)\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.0ce8051e6c15_remove_the_unique_constraint_from_the_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.4e45bd14838d_fix_and_initial_migration_after_",
        "description": "backend.alembic.versions.4e45bd14838d_fix_and_initial_migration_after_",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('first_name', sa.String(), nullable=False),\n    sa.Column('last_name', sa.String(), nullable=True),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('password_hash', sa.String(), nullable=False),\n    sa.Column('is_verified', sa.Boolean(), nullable=True),",
        "detail": "backend.alembic.versions.4e45bd14838d_fix_and_initial_migration_after_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.4e45bd14838d_fix_and_initial_migration_after_",
        "description": "backend.alembic.versions.4e45bd14838d_fix_and_initial_migration_after_",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_sites_id'), table_name='sites')\n    op.drop_index(op.f('ix_sites_domain'), table_name='sites')\n    op.drop_table('sites')\n    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')\n    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')\n    op.drop_table('refresh_tokens')\n    op.drop_index(op.f('ix_users_id'), table_name='users')",
        "detail": "backend.alembic.versions.4e45bd14838d_fix_and_initial_migration_after_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.70c0a6dde6e5_remove_the_site_verification_token_",
        "description": "backend.alembic.versions.70c0a6dde6e5_remove_the_site_verification_token_",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('sites', 'verification_token_expires_at')\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('sites', sa.Column('verification_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.70c0a6dde6e5_remove_the_site_verification_token_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.70c0a6dde6e5_remove_the_site_verification_token_",
        "description": "backend.alembic.versions.70c0a6dde6e5_remove_the_site_verification_token_",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('sites', sa.Column('verification_token_expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.70c0a6dde6e5_remove_the_site_verification_token_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.853d7848e551_add_the_default_none_constraint_to_the_",
        "description": "backend.alembic.versions.853d7848e551_add_the_default_none_constraint_to_the_",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.853d7848e551_add_the_default_none_constraint_to_the_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.853d7848e551_add_the_default_none_constraint_to_the_",
        "description": "backend.alembic.versions.853d7848e551_add_the_default_none_constraint_to_the_",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.853d7848e551_add_the_default_none_constraint_to_the_",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.b1c158fa34e3_make_the_site_verified_at_as_nullable",
        "description": "backend.alembic.versions.b1c158fa34e3_make_the_site_verified_at_as_nullable",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('sites', 'verified_at',\n               existing_type=postgresql.TIMESTAMP(),\n               nullable=True)\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###",
        "detail": "backend.alembic.versions.b1c158fa34e3_make_the_site_verified_at_as_nullable",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.b1c158fa34e3_make_the_site_verified_at_as_nullable",
        "description": "backend.alembic.versions.b1c158fa34e3_make_the_site_verified_at_as_nullable",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('sites', 'verified_at',\n               existing_type=postgresql.TIMESTAMP(),\n               nullable=False)\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.b1c158fa34e3_make_the_site_verified_at_as_nullable",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.b4563434b572_add_verification_token_expires_at_to_",
        "description": "backend.alembic.versions.b4563434b572_add_verification_token_expires_at_to_",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('sites', sa.Column('verification_token_expires_at', sa.DateTime(), nullable=False))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('sites', 'verification_token_expires_at')\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.b4563434b572_add_verification_token_expires_at_to_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.alembic.versions.b4563434b572_add_verification_token_expires_at_to_",
        "description": "backend.alembic.versions.b4563434b572_add_verification_token_expires_at_to_",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('sites', 'verification_token_expires_at')\n    # ### end Alembic commands ###",
        "detail": "backend.alembic.versions.b4563434b572_add_verification_token_expires_at_to_",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.alembic.env",
        "description": "backend.alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "backend.alembic.env",
        "description": "backend.alembic.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),",
        "detail": "backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.alembic.env",
        "description": "backend.alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    asyncio.run(run_async_migrations())\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()",
        "detail": "backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "database_url",
        "kind": 5,
        "importPath": "backend.alembic.env",
        "description": "backend.alembic.env",
        "peekOfCode": "database_url = Config.DATABASE_URL \n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\nconfig.set_main_option('sqlalchemy.url', database_url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here",
        "detail": "backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.alembic.env",
        "description": "backend.alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option('sqlalchemy.url', database_url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "backend.alembic.env",
        "description": "backend.alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "backend.alembic.env",
        "documentation": {}
    },
    {
        "label": "get_profile",
        "kind": 2,
        "importPath": "backend.app.api.v1.auth",
        "description": "backend.app.api.v1.auth",
        "peekOfCode": "def get_profile(user = Depends(get_current_user)):\n    return {\"userId\": user.id}\n# from fastapi import FastAPI, Header\n# from typing import Optional\n# from pydantic import BaseModel\n# app = FastAPI()\n# @app.get(\"/\")\n# async def read_root():\n#     return {\n#         \"message\": \"Hello, World!\"",
        "detail": "backend.app.api.v1.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.v1.auth",
        "description": "backend.app.api.v1.auth",
        "peekOfCode": "router = APIRouter()\nauth_router = router\n@router.get(\"/ping\")\nasync def ping():\n    return {\n        \"message\": \"pong\"\n    }\n@router.post(\"/sign-up\", status_code=status.HTTP_201_CREATED)\nasync def sign_up(data: UserSignUpRequest, response: Response, session: AsyncSession = Depends(get_session)):\n    return await sign_up_crud(data, response, session)",
        "detail": "backend.app.api.v1.auth",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "backend.app.api.v1.auth",
        "description": "backend.app.api.v1.auth",
        "peekOfCode": "auth_router = router\n@router.get(\"/ping\")\nasync def ping():\n    return {\n        \"message\": \"pong\"\n    }\n@router.post(\"/sign-up\", status_code=status.HTTP_201_CREATED)\nasync def sign_up(data: UserSignUpRequest, response: Response, session: AsyncSession = Depends(get_session)):\n    return await sign_up_crud(data, response, session)\n@router.post(\"/verify\", status_code=status.HTTP_200_OK)",
        "detail": "backend.app.api.v1.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.v1.scan",
        "description": "backend.app.api.v1.scan",
        "peekOfCode": "router = APIRouter()\nscan_router = router\n@router.post(\"/test\")\nasync def test_scan_domain(domain: ValidDomainSchema, user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    await verify_site_ownership(domain, user, session)\n    return {\"success\": True, \"message\": \"Test scan endpoint hit.\", \"domain\": domain.domain}",
        "detail": "backend.app.api.v1.scan",
        "documentation": {}
    },
    {
        "label": "scan_router",
        "kind": 5,
        "importPath": "backend.app.api.v1.scan",
        "description": "backend.app.api.v1.scan",
        "peekOfCode": "scan_router = router\n@router.post(\"/test\")\nasync def test_scan_domain(domain: ValidDomainSchema, user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    await verify_site_ownership(domain, user, session)\n    return {\"success\": True, \"message\": \"Test scan endpoint hit.\", \"domain\": domain.domain}",
        "detail": "backend.app.api.v1.scan",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.app.api.v1.site",
        "description": "backend.app.api.v1.site",
        "peekOfCode": "router = APIRouter()\nsite_router = router\n@router.get(\"/\")\nasync def get_list_user_domains(user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    return await get_list_user_domains_crud(user, session)\n@router.post(\"/\")\nasync def register_domain(data: ValidDomainSchema, user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    return await domain_registry_crud(data, user, session)\n@router.get(\"/status\")\nasync def get_domain_status(domain: ValidDomainSchema, user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):",
        "detail": "backend.app.api.v1.site",
        "documentation": {}
    },
    {
        "label": "site_router",
        "kind": 5,
        "importPath": "backend.app.api.v1.site",
        "description": "backend.app.api.v1.site",
        "peekOfCode": "site_router = router\n@router.get(\"/\")\nasync def get_list_user_domains(user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    return await get_list_user_domains_crud(user, session)\n@router.post(\"/\")\nasync def register_domain(data: ValidDomainSchema, user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    return await domain_registry_crud(data, user, session)\n@router.get(\"/status\")\nasync def get_domain_status(domain: ValidDomainSchema, user = Depends(get_current_user), session: AsyncSession = Depends(get_session)):\n    return await get_domain_status_crud(domain, user, session)",
        "detail": "backend.app.api.v1.site",
        "documentation": {}
    },
    {
        "label": "celery_app",
        "kind": 5,
        "importPath": "backend.app.core.celery_app",
        "description": "backend.app.core.celery_app",
        "peekOfCode": "celery_app = Celery(\n    \"backend_tasks\",\n    broker=Config.CELERY_BROKER_URL,\n    backend=Config.CELERY_RESULT_BACKEND,\n    include=[\"app.tasks.domain_verification\", \"app.tasks.scan\"]\n)\ncelery_app.conf.update(\n    task_track_started=True,\n    task_time_limit=30 * 60, #30 min max runtime\n    task_soft_time_limit=25 * 60, #25 min warning",
        "detail": "backend.app.core.celery_app",
        "documentation": {}
    },
    {
        "label": "celery_app.conf.task_routes",
        "kind": 5,
        "importPath": "backend.app.core.celery_app",
        "description": "backend.app.core.celery_app",
        "peekOfCode": "celery_app.conf.task_routes = {\n    'app.tasks.domain_verification.*': {'queue': 'domain_verification_queue'},\n    'app.tasks.scan.*': {'queue': 'scan_queue'},\n}",
        "detail": "backend.app.core.celery_app",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    ENV: str = \"development\"\n    DEBUG: bool = True\n    DATABASE_URL: str\n    CELERY_BROKER_URL: str\n    CELERY_RESULT_BACKEND: str\n    JWT_SECRET: str\n    JWT_ALGORITHM: str\n    ACCESS_TOKEN_EXPIRE_MINUTES: int\n    REFRESH_TOKEN_EXPIRE_DAYS: int",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "AppSettings",
        "kind": 6,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "class AppSettings(BaseSettings):\n    APP_NAME: str\n    DOMAIN_VERIFICATION_TOKEN_PREFIX: str\n    model_config = SettingsConfigDict(\n        env_file=ENV_FILE,\n        extra=\"ignore\",\n    )\nclass MailSettings(BaseSettings):\n    MAIL_USERNAME: str\n    MAIL_PASSWORD: str",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "MailSettings",
        "kind": 6,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "class MailSettings(BaseSettings):\n    MAIL_USERNAME: str\n    MAIL_PASSWORD: str\n    MAIL_FROM: str\n    MAIL_FROM_NAME: str\n    MAIL_PORT: str\n    MAIL_SERVER: str\n    MAIL_STARTTLS: bool\n    MAIL_SSL_TLS: bool\n    MAIL_DEBUG: bool",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "ENV_FILE",
        "kind": 5,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "ENV_FILE = os.getenv(\"ENV_FILE\", \".env.prod\")\nclass Settings(BaseSettings):\n    ENV: str = \"development\"\n    DEBUG: bool = True\n    DATABASE_URL: str\n    CELERY_BROKER_URL: str\n    CELERY_RESULT_BACKEND: str\n    JWT_SECRET: str\n    JWT_ALGORITHM: str\n    ACCESS_TOKEN_EXPIRE_MINUTES: int",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 5,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "Config = Settings()\nAppConfig = AppSettings()\nMailConfig = MailSettings()",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 5,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "AppConfig = AppSettings()\nMailConfig = MailSettings()",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "MailConfig",
        "kind": 5,
        "importPath": "backend.app.core.config",
        "description": "backend.app.core.config",
        "peekOfCode": "MailConfig = MailSettings()",
        "detail": "backend.app.core.config",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "kind": 5,
        "importPath": "backend.app.core.db",
        "description": "backend.app.core.db",
        "peekOfCode": "async_engine = create_async_engine(\n    Config.DATABASE_URL,\n    echo=False,  # set True for SQL logging\n)\n# Create session factory\nAsyncSessionLocal = sessionmaker(\n    bind=async_engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)",
        "detail": "backend.app.core.db",
        "documentation": {}
    },
    {
        "label": "AsyncSessionLocal",
        "kind": 5,
        "importPath": "backend.app.core.db",
        "description": "backend.app.core.db",
        "peekOfCode": "AsyncSessionLocal = sessionmaker(\n    bind=async_engine,\n    class_=AsyncSession,\n    expire_on_commit=False\n)\n# Dependency for FastAPI\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with AsyncSessionLocal() as session:\n        yield session\n# Convert the async URL to a sync one automatically",
        "detail": "backend.app.core.db",
        "documentation": {}
    },
    {
        "label": "SYNC_DATABASE_URL",
        "kind": 5,
        "importPath": "backend.app.core.db",
        "description": "backend.app.core.db",
        "peekOfCode": "SYNC_DATABASE_URL = Config.DATABASE_URL.replace(\"+asyncpg\", \"\")\nsync_engine = create_engine(\n    SYNC_DATABASE_URL,\n    echo=False,\n)\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=sync_engine\n)",
        "detail": "backend.app.core.db",
        "documentation": {}
    },
    {
        "label": "sync_engine",
        "kind": 5,
        "importPath": "backend.app.core.db",
        "description": "backend.app.core.db",
        "peekOfCode": "sync_engine = create_engine(\n    SYNC_DATABASE_URL,\n    echo=False,\n)\nSessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=sync_engine\n)",
        "detail": "backend.app.core.db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "backend.app.core.db",
        "description": "backend.app.core.db",
        "peekOfCode": "SessionLocal = sessionmaker(\n    autocommit=False,\n    autoflush=False,\n    bind=sync_engine\n)",
        "detail": "backend.app.core.db",
        "documentation": {}
    },
    {
        "label": "conf",
        "kind": 5,
        "importPath": "backend.app.core.email",
        "description": "backend.app.core.email",
        "peekOfCode": "conf = ConnectionConfig(\n    MAIL_USERNAME = MailConfig.MAIL_USERNAME,\n    MAIL_PASSWORD = MailConfig.MAIL_PASSWORD,\n    MAIL_FROM = MailConfig.MAIL_FROM,\n    MAIL_FROM_NAME = MailConfig.MAIL_FROM_NAME,\n    MAIL_PORT = MailConfig.MAIL_PORT,\n    MAIL_SERVER = MailConfig.MAIL_SERVER,\n    MAIL_STARTTLS = MailConfig.MAIL_STARTTLS,\n    MAIL_SSL_TLS = MailConfig.MAIL_SSL_TLS,\n    MAIL_DEBUG = MailConfig.MAIL_DEBUG,",
        "detail": "backend.app.core.email",
        "documentation": {}
    },
    {
        "label": "fm",
        "kind": 5,
        "importPath": "backend.app.core.email",
        "description": "backend.app.core.email",
        "peekOfCode": "fm = FastMail(conf)\nasync def send_email(recipients: list, subject: str, template_name: str, context: dict):\n    message = MessageSchema(\n        subject=subject,\n        recipients=recipients,\n        template_body=context,\n        subtype=MessageType.html\n    )\n    await fm.send_message(message, template_name=template_name)",
        "detail": "backend.app.core.email",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.app.core.security",
        "description": "backend.app.core.security",
        "peekOfCode": "pwd_context = CryptContext(\n    schemes=[\"argon2\"],\n    deprecated=\"auto\"\n)\nasync def get_password_hash(password: str) -> str:\n    return pwd_context.hash(password) \nasync def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)\nasync def revoke_session_token(response):\n    response.set_cookie(",
        "detail": "backend.app.core.security",
        "documentation": {}
    },
    {
        "label": "verify_verification",
        "kind": 2,
        "importPath": "backend.app.middleware.auth_middleware",
        "description": "backend.app.middleware.auth_middleware",
        "peekOfCode": "def verify_verification(cookie_name: str = \"verificationToken\"):\n    async def dependency(request: Request):\n        token = request.cookies.get(cookie_name)\n        if not token:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not authenticated\"\n            )\n        return await validation_token(token)\n    return dependency",
        "detail": "backend.app.middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.app.models.base",
        "description": "backend.app.models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "backend.app.models.base",
        "documentation": {}
    },
    {
        "label": "Site",
        "kind": 6,
        "importPath": "backend.app.models.site",
        "description": "backend.app.models.site",
        "peekOfCode": "class Site(Base):\n    __tablename__ = \"sites\"\n    id = Column(Integer, primary_key=True, index=True)\n    domain = Column(String, nullable=False, index=True)\n    verification_token = Column(String, nullable=False, unique=True)\n    # verification_token_expires_at = Column(DateTime, nullable=False)\n    is_verified = Column(Boolean, default=False)\n    verified_at = Column(DateTime, nullable=True)\n    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)",
        "detail": "backend.app.models.site",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "kind": 6,
        "importPath": "backend.app.models.user",
        "description": "backend.app.models.user",
        "peekOfCode": "class RefreshToken(Base):\n    __tablename__ = \"refresh_tokens\"\n    id= Column(Integer, primary_key=True, index=True)\n    token= Column(String, nullable=False, unique=True, index=True)\n    user_id= Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    created_at= Column(DateTime, default=datetime.utcnow, nullable=False)\n    expires_at= Column(DateTime, nullable=False)\n    # relationship\n    user = relationship(\"User\", back_populates=\"refresh_tokens\")\nclass User(Base):",
        "detail": "backend.app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.app.models.user",
        "description": "backend.app.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id= Column(Integer, primary_key=True, index=True)\n    first_name= Column(String, nullable=False)\n    last_name= Column(String, nullable=True)\n    email= Column(String, unique=True, index=True, nullable=False)\n    password_hash= Column(String, nullable=False)\n    is_verified= Column(Boolean, default=False)\n    verification_code= Column(String, nullable=True)\n    verification_code_expires_at= Column(DateTime, nullable=True)",
        "detail": "backend.app.models.user",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "backend.app.responses.base",
        "description": "backend.app.responses.base",
        "peekOfCode": "class BaseResponse(BaseModel):\n    model_config = ConfigDict(from_attributes=True, arbitrary_types_allowed=True)",
        "detail": "backend.app.responses.base",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.app.responses.user",
        "description": "backend.app.responses.user",
        "peekOfCode": "class UserResponse(BaseResponse):\n    first_name: str\n    last_name: Optional[str] = None\n    email: EmailStr",
        "detail": "backend.app.responses.user",
        "documentation": {}
    },
    {
        "label": "ValidDomainSchema",
        "kind": 6,
        "importPath": "backend.app.schemas.site",
        "description": "backend.app.schemas.site",
        "peekOfCode": "class ValidDomainSchema(BaseModel):\n    domain: str = Field(..., description=\"The URL of the site to scan\")\n    @validator('domain')\n    def validate_domain(cls, v):\n        # Basic domain regex: allows subdomains, letters, numbers, hyphens, and TLDs\n        pattern = r\"^(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,}$\"\n        if not re.match(pattern, v):\n            raise ValueError(\"Invalid domain format\")\n        return v",
        "detail": "backend.app.schemas.site",
        "documentation": {}
    },
    {
        "label": "UserSignUpRequest",
        "kind": 6,
        "importPath": "backend.app.schemas.user",
        "description": "backend.app.schemas.user",
        "peekOfCode": "class UserSignUpRequest(BaseModel):\n    first_name: str = Field(..., description=\"The first name of the user\")\n    last_name: Optional[str] = Field(None, description=\"The last name of the user\")\n    email: EmailStr = Field(..., description=\"The email address of the user\")\n    password: str = Field(..., min_length=6, description=\"The password for the user account\")\nclass UserVerifyRequest(BaseModel):\n    verification_code: str = Field(\n        ...,\n        description=\"The verification code sent to the user's email\",\n        pattern=r'^\\d{6}$'  # Ensures exactly 6 digits",
        "detail": "backend.app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserVerifyRequest",
        "kind": 6,
        "importPath": "backend.app.schemas.user",
        "description": "backend.app.schemas.user",
        "peekOfCode": "class UserVerifyRequest(BaseModel):\n    verification_code: str = Field(\n        ...,\n        description=\"The verification code sent to the user's email\",\n        pattern=r'^\\d{6}$'  # Ensures exactly 6 digits\n    )\nclass UserLoginRequest(BaseModel):\n    email: EmailStr = Field(..., description=\"The email address of the user\")\n    password: str = Field(..., description=\"The password for the user account\")\nclass RequestUserPasswordResetRequest(BaseModel):",
        "detail": "backend.app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserLoginRequest",
        "kind": 6,
        "importPath": "backend.app.schemas.user",
        "description": "backend.app.schemas.user",
        "peekOfCode": "class UserLoginRequest(BaseModel):\n    email: EmailStr = Field(..., description=\"The email address of the user\")\n    password: str = Field(..., description=\"The password for the user account\")\nclass RequestUserPasswordResetRequest(BaseModel):\n    email: EmailStr = Field(..., description=\"The email address of the user\")\nclass UserPasswordResetRequest(BaseModel):\n    new_password: str = Field(..., min_length=6, description=\"The new password for the user account\")",
        "detail": "backend.app.schemas.user",
        "documentation": {}
    },
    {
        "label": "RequestUserPasswordResetRequest",
        "kind": 6,
        "importPath": "backend.app.schemas.user",
        "description": "backend.app.schemas.user",
        "peekOfCode": "class RequestUserPasswordResetRequest(BaseModel):\n    email: EmailStr = Field(..., description=\"The email address of the user\")\nclass UserPasswordResetRequest(BaseModel):\n    new_password: str = Field(..., min_length=6, description=\"The new password for the user account\")",
        "detail": "backend.app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserPasswordResetRequest",
        "kind": 6,
        "importPath": "backend.app.schemas.user",
        "description": "backend.app.schemas.user",
        "peekOfCode": "class UserPasswordResetRequest(BaseModel):\n    new_password: str = Field(..., min_length=6, description=\"The new password for the user account\")",
        "detail": "backend.app.schemas.user",
        "documentation": {}
    },
    {
        "label": "verify_domain_task",
        "kind": 2,
        "importPath": "backend.app.tasks.domain_verification",
        "description": "backend.app.tasks.domain_verification",
        "peekOfCode": "def verify_domain_task(domain: str, user_id: int, PREFIX: str = AppConfig.DOMAIN_VERIFICATION_TOKEN_PREFIX):\n    logger.info(f\"Starting domain verification task for domain: {domain}, user_id: {user_id}\")\n    try:\n        # Create a fresh resolver instance (no cache, no stale data)\n        resolver = dns.resolver.Resolver()\n        resolver.cache = None\n        resolver.nameservers = [\"1.1.1.1\", \"8.8.8.8\"]  # Use reliable public DNS servers\n        resolver.timeout = 3 # Per DNS server timeout {seconds}\n        resolver.lifetime = 5 # Overall query timeout {seconds}\n        # Fetch fresh TXT records",
        "detail": "backend.app.tasks.domain_verification",
        "documentation": {}
    },
    {
        "label": "scan_website_task",
        "kind": 2,
        "importPath": "backend.app.tasks.scan",
        "description": "backend.app.tasks.scan",
        "peekOfCode": "def scan_website_task(url: str):\n    print(f\"Scanning URL: {url}\")\n    print(f\"Simulating scan for 4 seconds...\")\n    time.sleep()  # Simulate a time-consuming scan\n    print(f\"Completed scanning URL: {url}\")",
        "detail": "backend.app.tasks.scan",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.app.utils.logger",
        "description": "backend.app.utils.logger",
        "peekOfCode": "logger = logging.getLogger()\n# create formatter\nformatter = logging.Formatter(\n    fmt=\"%(asctime)s - %(levelname)s - %(message)s\",\n)\n# create handlers\nstream_handler = logging.StreamHandler(sys.stdout)\nfile_handler = logging.FileHandler(\"app.log\")\n# set formatters\nstream_handler.setFormatter(formatter)",
        "detail": "backend.app.utils.logger",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "backend.app.utils.logger",
        "description": "backend.app.utils.logger",
        "peekOfCode": "formatter = logging.Formatter(\n    fmt=\"%(asctime)s - %(levelname)s - %(message)s\",\n)\n# create handlers\nstream_handler = logging.StreamHandler(sys.stdout)\nfile_handler = logging.FileHandler(\"app.log\")\n# set formatters\nstream_handler.setFormatter(formatter)\nfile_handler.setFormatter(formatter)\n# add handlers to the logger",
        "detail": "backend.app.utils.logger",
        "documentation": {}
    },
    {
        "label": "stream_handler",
        "kind": 5,
        "importPath": "backend.app.utils.logger",
        "description": "backend.app.utils.logger",
        "peekOfCode": "stream_handler = logging.StreamHandler(sys.stdout)\nfile_handler = logging.FileHandler(\"app.log\")\n# set formatters\nstream_handler.setFormatter(formatter)\nfile_handler.setFormatter(formatter)\n# add handlers to the logger\nlogger.handlers = [stream_handler, file_handler]\n# set log-level\nlogger.setLevel(logging.INFO)\n# Silence watchfiles spam",
        "detail": "backend.app.utils.logger",
        "documentation": {}
    },
    {
        "label": "file_handler",
        "kind": 5,
        "importPath": "backend.app.utils.logger",
        "description": "backend.app.utils.logger",
        "peekOfCode": "file_handler = logging.FileHandler(\"app.log\")\n# set formatters\nstream_handler.setFormatter(formatter)\nfile_handler.setFormatter(formatter)\n# add handlers to the logger\nlogger.handlers = [stream_handler, file_handler]\n# set log-level\nlogger.setLevel(logging.INFO)\n# Silence watchfiles spam\nlogging.getLogger(\"watchfiles\").propagate = False",
        "detail": "backend.app.utils.logger",
        "documentation": {}
    },
    {
        "label": "logger.handlers",
        "kind": 5,
        "importPath": "backend.app.utils.logger",
        "description": "backend.app.utils.logger",
        "peekOfCode": "logger.handlers = [stream_handler, file_handler]\n# set log-level\nlogger.setLevel(logging.INFO)\n# Silence watchfiles spam\nlogging.getLogger(\"watchfiles\").propagate = False",
        "detail": "backend.app.utils.logger",
        "documentation": {}
    },
    {
        "label": "logging.getLogger(\"watchfiles\").propagate",
        "kind": 5,
        "importPath": "backend.app.utils.logger",
        "description": "backend.app.utils.logger",
        "peekOfCode": "logging.getLogger(\"watchfiles\").propagate = False",
        "detail": "backend.app.utils.logger",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "version = \"v1\"\napp = FastAPI(\n    version=version,\n)\n# origins = [\n#     \"http://localhost:8000\",  # your frontend\n#     \"http://127.0.0.1:8000\",\n# ]\n# app.add_middleware(\n#     CORSMiddleware,",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app.main",
        "description": "backend.app.main",
        "peekOfCode": "app = FastAPI(\n    version=version,\n)\n# origins = [\n#     \"http://localhost:8000\",  # your frontend\n#     \"http://127.0.0.1:8000\",\n# ]\n# app.add_middleware(\n#     CORSMiddleware,\n#     allow_origins=origins,",
        "detail": "backend.app.main",
        "documentation": {}
    },
    {
        "label": "celery",
        "kind": 5,
        "importPath": "backend.app.worker",
        "description": "backend.app.worker",
        "peekOfCode": "celery = celery_app",
        "detail": "backend.app.worker",
        "documentation": {}
    }
]