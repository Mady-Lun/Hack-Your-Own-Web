version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: hyow-postgres
    environment:
      POSTGRES_DB: hack_your_own_web
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyow-network

  # Redis for Celery Broker and Result Backend
  redis:
    image: redis:7-alpine
    container_name: hyow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyow-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hyow-backend
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker (ZAP)
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyow-network
    restart: unless-stopped

  # Celery Worker for Scan Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hyow-celery-worker
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker (ZAP)
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyow-network
    restart: unless-stopped

  # Celery Beat (Optional - for scheduled tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hyow-celery-beat
    command: celery -A app.core.celery_app beat --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hyow-network
    restart: unless-stopped

  # Flower - Celery monitoring 
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hyow-flower
    command: celery -A app.core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - ./backend/.env
    depends_on:
      - redis
      - celery-worker
    networks:
      - hyow-network
    restart: unless-stopped

networks:
  hyow-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
